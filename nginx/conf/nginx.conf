server {
    listen 80;
    listen [::]:80;

    server_name fish-vital.bnr.la www.fish-vital.bnr.la;
    server_tokens off;

    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot;
    }

    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name fish-vital.bnr.la www.fish-vital.bnr.la;

    # SSL Certificates
    ssl_certificate /etc/nginx/ssl/live/fish-vital.bnr.la/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/fish-vital.bnr.la/privkey.pem;

    # SSL hardening - ensure these files exist and are mounted
    # Reference the files from the volumes in docker-compose.yml
    include /etc/nginx/snippets/options-ssl-nginx.conf;
    ssl_dhparam /etc/nginx/ssl/ssl-dhparams.pem;

    # Security headers (optional, but recommended)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; object-src 'none'; frame-ancestors 'none';" always; # Adjust CSP as needed
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # Add after testing

    # Let's Encrypt ACME challenge (needed if you redirect all HTTP to HTTPS and the challenge needs to be accessible over HTTPS too)
    # This might not be strictly necessary if the HTTP block handles it before redirect.
    location /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot;
    }

    # Proxy requests for /server/ to the Node.js application
    location /server/ {
        proxy_pass http://server:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # For WebSockets

        rewrite ^/server(/.*)$ $1 break; # Remove "/server" from the path before forwarding
    }

    # Proxy requests for / to CouchDB
    location / {
        proxy_pass http://couchdb:5984;
        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}