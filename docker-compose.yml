services:

  server:
    restart: unless-stopped
    build:
      context: ./server
      dockerfile: Dockerfile
    command: sh -c "npm run ${NODE_ENV:-prod}"  # Use NODE_ENV to control the mode
    volumes:
      - ./server:/usr/app
      - /usr/app/node_modules
      - ./.env:/usr/app/.env  # Mount .env
      - ./certbot/conf/:/etc/letsencrypt/:ro # SSL certs for https
    ports:
      - "8080:8080"
    env_file:
      - ./.env  # Load environment variables for the server
    environment:
      - NODE_ENV=${NODE_ENV:-prod}  # Default to 'prod' if NODE_ENV is not set

  couchdb:
    restart: unless-stopped
    build: ./couchdb # Use Dockerfile
    ports:
      - "5984:5984"
    volumes:
      - ./couchdb/data:/opt/couchdb/data  # Persist data to local filesystem
    environment:
      COUCHDB_USER: ${COUCHDB_ADMIN_USER}  # Use environment variable from .env
      COUCHDB_PASSWORD: ${COUCHDB_ADMIN_PASSWORD}  # Use environment variable from .env
    env_file:
      - ./.env  # Load environment variables for CouchDB

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - ./redis:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  nginx:
    image: nginx:latest
    profiles: [prod]
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro

  certbot:
    image: certbot/certbot:latest
    profiles: [prod]
    restart: unless-stopped
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; echo \"Sleeping for 12 hours...\"; sleep 12h & wait $${!}; done;'"
